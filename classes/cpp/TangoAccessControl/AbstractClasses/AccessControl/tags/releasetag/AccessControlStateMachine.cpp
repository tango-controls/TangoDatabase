static const char *RcsId = "$Header$";
//+=============================================================================
//
// file :         AccessControlStateMachine.cpp
//
// description :  C++ source for the AccessControl and its alowed. 
//                method for commands and attributes
//
// project :      TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#include <tango.h>
#include <AccessControl.h>
#include <AccessControlClass.h>

/*====================================================================
 *	This file contains the methods to allow commands and attributes
 * read or write execution.
 *
 * If you wand to add your own code, add it between 
 * the "End/Re-Start of Generated Code" comments.
 *
 * If you want, you can also add your own methods.
 *====================================================================
 */

namespace AccessControl_ns
{

//=================================================
//		Attributes Allowed Methods
//=================================================


//=================================================
//		Commands Allowed Methods
//=================================================

//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_AddAddressForUser_allowed
// 
// description : 	Execution allowed for AddAddressForUser command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_AddAddressForUser_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_AddDeviceForUser_allowed
// 
// description : 	Execution allowed for AddDeviceForUser command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_AddDeviceForUser_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_CloneUser_allowed
// 
// description : 	Execution allowed for CloneUser command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_CloneUser_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_GetAccess_allowed
// 
// description : 	Execution allowed for GetAccess command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_GetAccess_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_GetAddressByUser_allowed
// 
// description : 	Execution allowed for GetAddressByUser command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_GetAddressByUser_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_GetAllowedCommands_allowed
// 
// description : 	Execution allowed for GetAllowedCommands command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_GetAllowedCommands_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_GetDeviceByUser_allowed
// 
// description : 	Execution allowed for GetDeviceByUser command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_GetDeviceByUser_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_GetDeviceClass_allowed
// 
// description : 	Execution allowed for GetDeviceClass command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_GetDeviceClass_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_GetUsers_allowed
// 
// description : 	Execution allowed for GetUsers command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_GetUsers_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_RemoveAddressForUser_allowed
// 
// description : 	Execution allowed for RemoveAddressForUser command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_RemoveAddressForUser_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_RemoveDeviceForUser_allowed
// 
// description : 	Execution allowed for RemoveDeviceForUser command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_RemoveDeviceForUser_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_RemoveUser_allowed
// 
// description : 	Execution allowed for RemoveUser command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_RemoveUser_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_RegisterService_allowed
// 
// description : 	Execution allowed for RegisterService command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_RegisterService_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AccessControl::is_UnregisterService_allowed
// 
// description : 	Execution allowed for UnregisterService command.
//
//-----------------------------------------------------------------------------
bool AccessControl::is_UnregisterService_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}

}	// namespace AccessControl_ns
