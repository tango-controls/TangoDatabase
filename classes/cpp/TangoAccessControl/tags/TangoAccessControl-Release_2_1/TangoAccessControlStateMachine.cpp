/*----- PROTECTED REGION ID(TangoAccessControlStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id$";
//=============================================================================
//
// file :        TangoAccessControlStateMachine.cpp
//
// description : C++ source for the «name» and its alowed
//               methods for commands and attributes
//
// project :     Tango Access Control Management.
//
// $Author$
//
// $Revision$
// $Date$
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source$
// $Log$
// Revision 1.4  2011/02/11 13:28:43  pascal_verdier
// Pogo-7 compatibility.
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================



#include <TangoAccessControl.h>
#include <TangoAccessControlClass.h>

/*----- PROTECTED REGION END -----*/


/*
 * TangoAccessControl states description:
 *
 * ON :	The MySql database handle is OK. 
 * FAULT :	The MySql database handle is not OK. 
 */

namespace TangoAccessControl_ns
{

//=================================================
//		Attributes Allowed Methods
//=================================================


	/*----- PROTECTED REGION ID(TangoAccessControl::are_dynamic_attributes_allowed) ENABLED START -----*/

	//	Add your code to check if dynamic attributes are alowed

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::are_dynamic_attributes_allowed


//=================================================
//		Commands Allowed Methods
//=================================================


//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_AddAddressForUserState_allowed()
 *	Description : Execution allowed for AddAddressForUser command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_AddAddressForUser_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::FAULT)
	{

	/*----- PROTECTED REGION ID(TangoAccessControl::AddAddressForUserStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::AddAddressForUserStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_AddDeviceForUserState_allowed()
 *	Description : Execution allowed for AddDeviceForUser command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_AddDeviceForUser_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::FAULT)
	{

	/*----- PROTECTED REGION ID(TangoAccessControl::AddDeviceForUserStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::AddDeviceForUserStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_CloneUserState_allowed()
 *	Description : Execution allowed for CloneUser command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_CloneUser_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::FAULT)
	{

	/*----- PROTECTED REGION ID(TangoAccessControl::CloneUserStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::CloneUserStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_GetAccessState_allowed()
 *	Description : Execution allowed for GetAccess command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_GetAccess_allowed(const CORBA::Any &any)
{
	//	Not any excluded states for GetAccess command.

	/*----- PROTECTED REGION ID(TangoAccessControl::GetAccessStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::GetAccessStateAllowed

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_GetAccessForMutiIPState_allowed()
 *	Description : Execution allowed for GetAccessForMutiIP command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_GetAccessForMutiIP_allowed(const CORBA::Any &any)
{
	//	Not any excluded states for GetAccessForMutiIP command.

	/*----- PROTECTED REGION ID(TangoAccessControl::GetAccessForMutiIPStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::GetAccessForMutiIPStateAllowed

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_GetAddressByUserState_allowed()
 *	Description : Execution allowed for GetAddressByUser command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_GetAddressByUser_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::FAULT)
	{

	/*----- PROTECTED REGION ID(TangoAccessControl::GetAddressByUserStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::GetAddressByUserStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_GetAllowedCommandClassListState_allowed()
 *	Description : Execution allowed for GetAllowedCommandClassList command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_GetAllowedCommandClassList_allowed(const CORBA::Any &any)
{
	//	Not any excluded states for GetAllowedCommandClassList command.

	/*----- PROTECTED REGION ID(TangoAccessControl::GetAllowedCommandClassListStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::GetAllowedCommandClassListStateAllowed

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_GetAllowedCommandsState_allowed()
 *	Description : Execution allowed for GetAllowedCommands command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_GetAllowedCommands_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::FAULT)
	{

	/*----- PROTECTED REGION ID(TangoAccessControl::GetAllowedCommandsStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::GetAllowedCommandsStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_GetDeviceByUserState_allowed()
 *	Description : Execution allowed for GetDeviceByUser command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_GetDeviceByUser_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::FAULT)
	{

	/*----- PROTECTED REGION ID(TangoAccessControl::GetDeviceByUserStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::GetDeviceByUserStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_GetDeviceClassState_allowed()
 *	Description : Execution allowed for GetDeviceClass command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_GetDeviceClass_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::FAULT)
	{

	/*----- PROTECTED REGION ID(TangoAccessControl::GetDeviceClassStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::GetDeviceClassStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_GetUsersState_allowed()
 *	Description : Execution allowed for GetUsers command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_GetUsers_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::FAULT)
	{

	/*----- PROTECTED REGION ID(TangoAccessControl::GetUsersStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::GetUsersStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_RegisterServiceState_allowed()
 *	Description : Execution allowed for RegisterService command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_RegisterService_allowed(const CORBA::Any &any)
{
	//	Not any excluded states for RegisterService command.

	/*----- PROTECTED REGION ID(TangoAccessControl::RegisterServiceStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::RegisterServiceStateAllowed

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_RemoveAddressForUserState_allowed()
 *	Description : Execution allowed for RemoveAddressForUser command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_RemoveAddressForUser_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::FAULT)
	{

	/*----- PROTECTED REGION ID(TangoAccessControl::RemoveAddressForUserStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::RemoveAddressForUserStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_RemoveDeviceForUserState_allowed()
 *	Description : Execution allowed for RemoveDeviceForUser command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_RemoveDeviceForUser_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::FAULT)
	{

	/*----- PROTECTED REGION ID(TangoAccessControl::RemoveDeviceForUserStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::RemoveDeviceForUserStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_RemoveUserState_allowed()
 *	Description : Execution allowed for RemoveUser command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_RemoveUser_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::FAULT)
	{

	/*----- PROTECTED REGION ID(TangoAccessControl::RemoveUserStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::RemoveUserStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoAccessControl::is_UnregisterServiceState_allowed()
 *	Description : Execution allowed for UnregisterService command.
 */
//--------------------------------------------------------

bool TangoAccessControl::is_UnregisterService_allowed(const CORBA::Any &any)
{
	//	Not any excluded states for UnregisterService command.

	/*----- PROTECTED REGION ID(TangoAccessControl::UnregisterServiceStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::UnregisterServiceStateAllowed

	return true;
}


	/*----- PROTECTED REGION ID(TangoAccessControl::are_dynamic_commands_allowed) ENABLED START -----*/

	//	Add your code to check if dynamic commands are alowed

	/*----- PROTECTED REGION END -----*/	//	TangoAccessControl::are_dynamic_commands_allowed

}	// namespace TangoAccessControl_ns
