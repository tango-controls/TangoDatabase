#=============================================================================
#
# file :        Makefile
#
# description : Include for the TangoAccessControl class.
#
# project :     Makefile to generate a Tango server
#
# $Author$
#
# $Revision$
#
# $Log$
# Revision 1.5  2008/09/25 08:07:13  pascal_verdier
# *** empty log message ***
#
# Revision 1.4  2008/09/25 08:03:26  pascal_verdier
# TANGO_HOME changed.
#
# Revision 1.3  2006/09/20 12:14:21  pascal_verdier
# Solaris gcc added.
#
# Revision 1.2  2006/09/20 07:42:56  pascal_verdier
# Pathes added for linux.
#
# Revision 1.1.1.1  2006/09/15 11:55:42  pascal_verdier
# Initial Revision
#
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#  		This file is generated by POGO
#	(Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#

CLASS      = TangoAccessControl
MAJOR_VERS = 1
MINOR_VERS = 0
RELEASE    = Release_$(MAJOR_VERS)_$(MINOR_VERS)
OS         = $(shell /csadmin/common/scripts/get_os)
#-----------------------------------------
#	Set default home directories
#-----------------------------------------

TANGO_HOME   =  /segfs/tango/release
CPP_SERVERS  =  $(TANGO_HOME)/cppserver

ifdef no_debug
	DEBUG = -O
else
	DEBUG = -g
endif

ifdef _solaris
CC = CC 
BIN_DIR=$(OS)_CC
ifdef _gcc
CC = gcc
BIN_DIR = $(OS)_gcc
endif

AR_SL = $(CC) -mt -G
VERS_OPT = -h
SL_EXT = so

MYSQL_INC_DIR=/usr/local/mysql/include/mysql
MYSQL_LIB_DIR=/usr/local/mysql/lib/mysql
endif

ifdef linux
CC = c++
CC_SHLIB = $(CC)  -fPIC
AR = ar
BIN_DIR=$(OS)

AR_SL = $(CC) -fPIC -shared 
SL_EXT = so
VERS_OPT = -Wl,-soname,

MYSQL_INC_DIR=/usr/include/mysql
MYSQL_LIB_DIR=/usr/lib/mysql
endif

SUPER_HOME   =  /segfs/tango/templates/AbstractClasses/AccessControl
INCLUDE_DIRS =  -I$(MYSQL_INC_DIR) \
				-I$(TANGO_HOME)/$(BIN_DIR)/include	\
				-I.	 -I$(SUPER_HOME) \
                -I$(CPP_SERVERS)/include

OBJS_DIR    = obj/$(BIN_DIR)
LIB_DIRS    = -L $(MYSQL_LIB_DIR) \
				-L $(TANGO_HOME)/$(BIN_DIR)/lib

TARGET_LIB = $(CPP_SERVERS)/lib/$(BIN_DIR)/libtgclasses.a


#-----------------------------------------
#	Set  CXXFLAGS and LFLAGS
#-----------------------------------------
ifdef _gcc
STD_LIB=	-lstdc++
endif
ifdef _solaris
CXXFLAGS =  $(DEBUG) -D_PTHREADS $(INCLUDE_DIRS)
LFLAGS =  $(DEBUG) $(LIB_DIRS)  		\
				-ltango			\
				-llog4tango		\
				-lomniORB4 		\
				-lomniDynamic4	\
				-lomnithread	\
				-lCOS4			\
				-lpthread		\
				-lmysqlclient	\
				-lz				\
				-lposix4 -lsocket -lnsl $(STD_LIB) -lm
endif

ifdef linux
CXXFLAGS =  $(DEBUG) -D_REENTRANT $(INCLUDE_DIRS)
LFLAGS =  $(DEBUG) $(LIB_DIRS)  		\
				-ltango			\
				-llog4tango		\
				-lomniORB4 		\
				-lomniDynamic4	\
				-lomnithread	\
				-lCOS4			\
				-lmysqlclient	\
				-lz				\
				-ldl -lpthread
endif




#-----------------------------------------
#	Set  dependences
#-----------------------------------------

SVC_OBJS = $(OBJS_DIR)/DbUtils.o	\
		$(OBJS_DIR)/$(CLASS).o \
		$(OBJS_DIR)/main.o	\
		$(OBJS_DIR)/ClassFactory.o	\
		$(OBJS_DIR)/$(CLASS)Class.o	\
		$(OBJS_DIR)/$(CLASS)StateMachine.o


SHLIB_OBJS = $(OBJS_DIR)/$(CLASS)Class.so.o	\
		$(OBJS_DIR)/$(CLASS)StateMachine.so.o	\
		$(OBJS_DIR)/$(CLASS).so.o


SVC_INC = $(CLASS)Class.h \
		$(CLASS).h


$(OBJS_DIR)/%.o: %.cpp $(SVC_INC)
	$(CC) $(CXXFLAGS) -c $< -o $(OBJS_DIR)/$*.o
			
$(OBJS_DIR)/%.so.o: %.cpp $(SVC_INC)
	$(CC_SHLIB) $(CXXFLAGS) -c $< -o $(OBJS_DIR)/$*.so.o


#-----------------------------------------
#	 Make Entry
#-----------------------------------------
all: $(CLASS)
	
$(CLASS):	make_obj_dir make_bin_dir $(SVC_OBJS)
	$(CC) $(SVC_OBJS) -o $(CLASS) $(LFLAGS)
	@mv $(CLASS) bin/$(BIN_DIR)/$(CLASS)

shlib:	make_obj_dir make_shlib_dir $(SHLIB_OBJS)
	$(AR_SL) -o \
		shlib/$(BIN_DIR)/$(CLASS).$(SL_EXT).$(MAJOR_VERS).$(MINOR_VERS) \
		$(VERS_OPT)shlib/$(BIN_DIR)/$(CLASS).$(SL_EXT).$(MAJOR_VERS) \
		$(SHLIB_OBJS) $(LFLAGS)
	@rm -f shlib/$(BIN_DIR)/$(CLASS).$(SL_EXT)
	@cd  shlib/$(BIN_DIR); \
		ln -s $(CLASS).$(SL_EXT).$(MAJOR_VERS).$(MINOR_VERS) $(CLASS).$(SL_EXT)

clean:
	rm -f $(OBJS_DIR)/*.o  \
	$(OBJS_DIR)/*.so.o \
	bin/$(BIN_DIR)/$(CLASS) \
	core

make_obj_dir:
	@mkdir -p obj
	@mkdir -p obj/$(BIN_DIR)

make_bin_dir:
	@mkdir -p bin
	@mkdir -p bin/$(BIN_DIR)

make_shlib_dir:
	@mkdir -p shlib
	@mkdir -p shlib/$(BIN_DIR)
	
#-----------------------------------------
#	 Install binary file
#-----------------------------------------
install:
	cp bin/$(BIN_DIR)/$(CLASS)  $(TANGO_HOME)/../bin/$(BIN_DIR)

#-----------------------------------------
#	 Update class library and header files
#	recompile without debug mode.
#-----------------------------------------
lib: clean
	@make no_debug=1
	cp *.h $(CPP_SERVERS)/include
	ar ruv $(TARGET_LIB)/$(CLASS).o
	ar ruv $(TARGET_LIB)/$(CLASS)Class.o
	ar ruv $(TARGET_LIB)/$(CLASS)StateMachine.o
	ident  $(TARGET_LIB)/* | grep $(CLASS)

#----------------------------------------------------
#	Tag the CVS module corresponding to this class
#----------------------------------------------------
tag:
	@cvstag "$(CLASS)-$(RELEASE)"
	@make   $(CLASS)
	@make show_tag

show_tag:
	@cvstag -d 
