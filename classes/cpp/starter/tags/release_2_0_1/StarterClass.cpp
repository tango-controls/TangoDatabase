static const char *RcsId = "$Header$";
//+=============================================================================
//
// file :        StarterClass.cpp
//
// description : C++ source for the StarterClass. A singleton
//               class derived from Tango::DeviceClass. It implements the
//               command list and all properties and methods required
//               by the Starter once per process.
//
// project :     TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 3.2  2004/05/19 08:56:32  pascal_verdier
// Bug fixed on service mode.
// CreateProcess used under Windows.
//
// Revision 3.0.1.3  2004/02/27 09:53:02  pascal_verdier
// - The starter device is now warned by Database server when something change on a server.
// It replace the DbGetHostServersInfo polling.
// - HostState, ControlledRunningServers, ontrolledStoppedServers attributes added.
//
// Revision 3.0.1.2  2003/12/08 08:53:52  pascal_verdier
// Cluster (multi-host) control implemented.
// Control of notify daemon implemented but not tested.
//
// Revision 3.0.1.1  2003/09/18 12:02:49  pascal_verdier
// Problem on Windows service startup fixed.
//
// Revision 3.0  2003/06/17 12:06:36  pascal_verdier
// TANGO 3.x server.
// polling bugs fixed.
//
// Revision 2.0  2003/01/09 13:35:50  verdier
// TANGO 2.2
//
// Revision 1.22  2002/12/18 08:09:19  verdier
// omniORB compatibility
//
// Revision 1.6  2002/10/15 18:55:21  verdier
// The host state is now calculated during the State polled command.
//
// Revision 1.5  2002/02/27 15:19:32  verdier
// WinNt services implemented.
//
// Revision 1.4  2001/04/03 09:40:50  verdier
// WInNt version is running.
//
// Revision 1.3  2001/02/12 09:34:21  verdier
// SunOS and Linux OK.
//
// Revision 1.2  2000/10/12 08:54:13  verdier
// Compatible with tango 2 done
//  Update from database info added.
//
// Revision 1.1  2000/07/31 13:48:42  verdier
// Initial revision
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//             (c) - Pascal Verdier - ESRF
//=============================================================================


#include <tango.h>

#include <Starter.h>
#include <StarterClass.h>

namespace Starter
{
//+----------------------------------------------------------------------------
//
// method : 		NotifyDaemonStateCmd::NotifyDaemonStateCmd()
// 
// description : 	constructor for the command of the Starter.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
NotifyDaemonStateCmd::NotifyDaemonStateCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
NotifyDaemonStateCmd::NotifyDaemonStateCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		NotifyDaemonStateCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool NotifyDaemonStateCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		NotifyDaemonStateCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *NotifyDaemonStateCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	return insert((static_cast<Starter *>(device))->notify_daemon_state());
}


//+----------------------------------------------------------------------------
//
// method : 		StartPollingThreadCmd::StartPollingThreadCmd()
// 
// description : 	constructor for the command of the Starter.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
StartPollingThreadCmd::StartPollingThreadCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
StartPollingThreadCmd::StartPollingThreadCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		StartPollingThreadCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool StartPollingThreadCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		StartPollingThreadCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *StartPollingThreadCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	((static_cast<Starter *>(device))->start_polling_thread());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		UpdateServersInfoCmd::UpdateServersInfoCmd()
// 
// description : 	constructor for the command of the Starter.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
UpdateServersInfoCmd::UpdateServersInfoCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
UpdateServersInfoCmd::UpdateServersInfoCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		UpdateServersInfoCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool UpdateServersInfoCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		UpdateServersInfoCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *UpdateServersInfoCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	((static_cast<Starter *>(device))->update_servers_info());
	return new CORBA::Any();
}


//+----------------------------------------------------------------------------
//
// method : 		DevReadLogCmd::DevReadLogCmd()
// 
// description : 	constructor for the command of the .DevReadLogCmd
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevReadLogCmd::DevReadLogCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevReadLogCmd::DevReadLogCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevReadLogCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevReadLogCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevReadLogCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevReadLogCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	return insert((static_cast<Starter *>(device))->dev_read_log(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevStopAllCmd::DevStopAllCmd()
// 
// description : 	constructor for the command of the DevStopAllCmd.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevStopAllCmd::DevStopAllCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevStopAllCmd::DevStopAllCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevStopAllCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevStopAllCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevStopAllCmd::execute()
// 
// description : 	method to trigger the execution of the command
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevStopAllCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);

	((static_cast<Starter *>(device))->dev_stop_all(argin));
	return new CORBA::Any();
}


//+----------------------------------------------------------------------------
//
// method : 		DevStartAllCmd::DevStartAllCmd()
// 
// description : 	constructor for the command of the .DevStartAllCmd
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevStartAllCmd::DevStartAllCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevStartAllCmd::DevStartAllCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevStartAllCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevStartAllCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevStartAllCmd::execute()
// 
// description : 	method to trigger the execution of the command
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevStartAllCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);

	((static_cast<Starter *>(device))->dev_start_all(argin));
	return new CORBA::Any();
}


//+----------------------------------------------------------------------------
//
// method : 		DevGetStopServersCmd::DevGetStopServersCmd()
// 
// description : 	constructor for the command of the DevGetStopServersCmd.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevGetStopServersCmd::DevGetStopServersCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevGetStopServersCmd::DevGetStopServersCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevGetStopServersCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevGetStopServersCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevGetStopServersCmd::execute()
// 
// description : 	method to trigger the execution of the command
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevGetStopServersCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevBoolean	argin;
	extract(in_any, argin);

	return insert((static_cast<Starter *>(device))->dev_get_stop_servers(argin));
}


//+----------------------------------------------------------------------------
//
// method : 		DevGetRunningServersCmd::DevGetRunningServerCmd()
// 
// description : 	constructor for the command of the DevGetRunningServersCmd.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevGetRunningServersCmd::DevGetRunningServersCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}
//
//	Constructor without in/out parameters description
//
DevGetRunningServersCmd::DevGetRunningServersCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevGetRunningServersCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevGetRunningServersCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevGetRunningServerCmd::execute()
// 
// description : 	method to trigger the execution of the command
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevGetRunningServersCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevBoolean	argin;
	extract(in_any, argin);

	return insert((static_cast<Starter *>(device))->dev_get_running_servers(argin));
}


//+----------------------------------------------------------------------------
//
// method : 		DevStartCmd::DevStartCmd()
// 
// description : 	constructor for the command of the .DevStartCmd
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevStartCmd::DevStartCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevStartCmd::DevStartCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevStartCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevStartCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevStartCmd::execute()
// 
// description : 	method to trigger the execution of the command
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevStartCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<Starter *>(device))->dev_start(argin));
	return new CORBA::Any();
}


//+----------------------------------------------------------------------------
//
// method : 		DevStopCmd::DevStopCmd()
// 
// description : 	constructor for the command of the .DevStopCmd
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevStopCmd::DevStopCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevStopCmd::DevStopCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevStopCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevStopCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevStopCmd::execute()
// 
// description : 	method to trigger the execution of the command
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevStopCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<Starter *>(device))->dev_stop(argin));
	return new CORBA::Any();
}



//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
StarterClass *StarterClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		StarterClass::StarterClass(string &s)
// 
// description : 	constructor for the StarterClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
StarterClass::StarterClass(string &s):Tango::DeviceClass(s)
{

	cout2 << "Entering StarterClass constructor" << endl;
	write_class_property();

	get_class_property();

	cout2 << "Leaving StarterClass constructor" << endl;
}

//+----------------------------------------------------------------------------
//
// method : 		StarterClass::~StarterClass()
// 
// description : 	destructor for the StarterClass class
//
//-----------------------------------------------------------------------------
StarterClass::~StarterClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		StarterClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
StarterClass *StarterClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new StarterClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

StarterClass *StarterClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		StarterClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void StarterClass::command_factory()
{
	command_list.push_back(new DevStartAllCmd("DevStartAll",
		Tango::DEV_SHORT, Tango::DEV_VOID,
		"Startup level.",
		"",
		Tango::OPERATOR));
	command_list.push_back(new DevStopAllCmd("DevStopAll",
		Tango::DEV_SHORT, Tango::DEV_VOID,
		"Startup Level.",
		"",
		Tango::OPERATOR));
	command_list.push_back(new DevGetRunningServersCmd("DevGetRunningServers",
		Tango::DEV_BOOLEAN, Tango::DEVVAR_STRINGARRAY,
		"True for all servers. False for controled servers only.",
		"List of the processes which are running.",
		Tango::OPERATOR));
	command_list.push_back(new DevGetStopServersCmd("DevGetStopServers",
		Tango::DEV_BOOLEAN, Tango::DEVVAR_STRINGARRAY,
		"True for all servers. False for controled servers only.",
		"List of the processes which are not running.",
		Tango::OPERATOR));
	command_list.push_back(new DevStartCmd("DevStart",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"Syntax to start the Tango component",
		"",
		Tango::OPERATOR));
	command_list.push_back(new DevStopCmd("DevStop",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"The Tango component to be stopped.",
		"",
		Tango::OPERATOR));
	command_list.push_back(new DevReadLogCmd("DevReadLog",
		Tango::DEV_STRING, Tango::CONST_DEV_STRING,
		"server name and domain",
		"ig Starter/corvus)",
		Tango::OPERATOR));
	command_list.push_back(new UpdateServersInfoCmd("UpdateServersInfo",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new StartPollingThreadCmd("StartPollingThread",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new NotifyDaemonStateCmd("NotifyDaemonState",
		Tango::DEV_VOID, Tango::DEV_STATE,
		"",
		"Tango::ON if Notify daemon is running else Tango::FAULT.",
		Tango::OPERATOR));

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		StarterClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void StarterClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create device and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new Starter(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before id database used.
		//---------------------------------------------
		if (Tango::Util::_UseDb == true)
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
}
//+----------------------------------------------------------------------------
//	Method: StarterClass::attribute_factory(vector<Tango::Attr *> &att_list)
//-----------------------------------------------------------------------------
void StarterClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	//	Attribute : HostState
	Tango::Attr	*host_state = 
		new Tango::Attr("HostState", Tango::DEV_SHORT, Tango::READ);
	att_list.push_back(host_state);

	//	Attribute : RunningServers
	Tango::SpectrumAttr	*running_servers = 
		new Tango::SpectrumAttr("RunningServers", Tango::DEV_STRING, 50);
	att_list.push_back(running_servers);

	//	Attribute : StoppedServers
	Tango::SpectrumAttr	*stopped_servers = 
		new Tango::SpectrumAttr("StoppedServers", Tango::DEV_STRING, 50);
	Tango::UserDefaultAttrProp	stopped_servers_prop;
	stopped_servers_prop.set_label("All Stopped Servers");
	stopped_servers_prop.set_description("Return all the Stopped servers.\n");
	stopped_servers->set_default_properties(stopped_servers_prop);
	att_list.push_back(stopped_servers);

}
//+----------------------------------------------------------------------------
//
// method : 		StarterClass::get_class_property
// 
// description : 	Get the class property from database.
//
//-----------------------------------------------------------------------------
void StarterClass::get_class_property()
{
	//	Initialize your default values here.
	//------------------------------------------
	readInfoDbPeriod  = 4;
	nbStartupLevels   = 5;
	cmdPollingTimeout = 60;
	useEvents = false;

	//	Read class properties from database.(Automatic code generation)
	//-------------------------------------------------------------
	Tango::DbData	data;
	data.push_back(Tango::DbDatum("ReadInfoDbPeriod"));
	data.push_back(Tango::DbDatum("NbStartupLevels"));
	data.push_back(Tango::DbDatum("CmdPollingTimeout"));
	data.push_back(Tango::DbDatum("UseEvents"));

	//	Call database and extract values
	//--------------------------------------------
	get_db_class()->get_property(data);
	if (data[0].is_empty()==false)	data[0]  >>  readInfoDbPeriod;
	if (data[1].is_empty()==false)	data[1]  >>  nbStartupLevels;
	if (data[2].is_empty()==false)	data[2]  >>  cmdPollingTimeout;
	if (data[3].is_empty()==false)	data[3]  >>  useEvents;

	//	End of Automatic code generation
	//-------------------------------------------------------------
	cout2 << "readInfoDbPeriod  = " << readInfoDbPeriod << endl;
	cout2 << "nbStartupLevels   = " << nbStartupLevels << endl;
	cout2 << "cmdPollingTimeout = " << cmdPollingTimeout << endl;
	cout2 << "useEvents         = " << ((useEvents)? "True":"False") << endl;
}
//+----------------------------------------------------------------------------
//
// method : 		StarterClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void StarterClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	//	Prepeare DbDatum
	//--------------------------------------------
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Starter for Tango Administration");
	title << str_title;

	Tango::DbDatum	description("Description");
	string	str_desc("This device server is able to control <b>Tango</b> components (database, device servers, clients...).\n\
It is able to start or stop and to report the status of these components.");
	description << str_desc;
	
	Tango::DbData	data;
	data.push_back(title);
	data.push_back(description);

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

}	// namespace
