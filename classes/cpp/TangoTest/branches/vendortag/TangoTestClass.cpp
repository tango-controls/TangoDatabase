static const char *RcsId = "$Header$";
//+=============================================================================
//
// file :        TangoTestClass.cpp
//
// description : C++ source for the TangoTestClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the TangoTest once per process.
//
// project :     TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043 
//              FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


#include <tango.h>

#include <TangoTest.h>
#include <TangoTestClass.h>


namespace TangoTest 
{


//+----------------------------------------------------------------------------
//
// method : 		DevVoidCmd::DevVoidCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevVoidCmd::DevVoidCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevVoidCmd::DevVoidCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevVoidCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevVoidCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevVoidCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevVoidCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	((static_cast<TangoTest *>(device))->dev_void());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		DevBooleanCmd::DevBooleanCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevBooleanCmd::DevBooleanCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevBooleanCmd::DevBooleanCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevBooleanCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevBooleanCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevBooleanCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevBooleanCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevBoolean	argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_boolean(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevShortCmd::DevShortCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevShortCmd::DevShortCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevShortCmd::DevShortCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevShortCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevShortCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevShortCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevShortCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_short(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevUShortCmd::DevUShortCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevUShortCmd::DevUShortCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevUShortCmd::DevUShortCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevUShortCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevUShortCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevUShortCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevUShortCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevUShort	argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_ushort(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevLongCmd::DevLongCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevLongCmd::DevLongCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevLongCmd::DevLongCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevLongCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevLongCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//


// method : 		DevLongCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevLongCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_long(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevULongCmd::DevULongCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevULongCmd::DevULongCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevULongCmd::DevULongCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevULongCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevULongCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevULongCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevULongCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevULong	argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_ulong(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevFloatCmd::DevFloatCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevFloatCmd::DevFloatCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevFloatCmd::DevFloatCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevFloatCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevFloatCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevFloatCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevFloatCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevFloat	argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_float(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevDoubleCmd::DevDoubleCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevDoubleCmd::DevDoubleCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevDoubleCmd::DevDoubleCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevDoubleCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevDoubleCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevDoubleCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevDoubleCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevDouble	argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_double(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevStringCmd::DevStringCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevStringCmd::DevStringCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevStringCmd::DevStringCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevStringCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevStringCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevStringCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevStringCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_string(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevVarCharArrayCmd::DevVarCharArrayCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevVarCharArrayCmd::DevVarCharArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevVarCharArrayCmd::DevVarCharArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//

// method : 		DevVarCharArrayCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevVarCharArrayCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarCharArrayCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevVarCharArrayCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	const Tango::DevVarCharArray	*argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_var_char_array(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevVarShortArrayCmd::DevVarShortArrayCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevVarShortArrayCmd::DevVarShortArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevVarShortArrayCmd::DevVarShortArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarShortArrayCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevVarShortArrayCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarShortArrayCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevVarShortArrayCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	const Tango::DevVarShortArray	*argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_var_short_array(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevVarUShortArrayCmd::DevVarUShortArrayCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevVarUShortArrayCmd::DevVarUShortArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevVarUShortArrayCmd::DevVarUShortArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}





//+----------------------------------------------------------------------------
//
// method : 		DevVarUShortArrayCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevVarUShortArrayCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarUShortArrayCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevVarUShortArrayCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	const Tango::DevVarUShortArray	*argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_var_ushort_array(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevVarLongArrayCmd::DevVarLongArrayCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevVarLongArrayCmd::DevVarLongArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevVarLongArrayCmd::DevVarLongArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarLongArrayCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevVarLongArrayCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarLongArrayCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevVarLongArrayCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	const Tango::DevVarLongArray	*argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_var_long_array(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevVarULongArrayCmd::DevVarULongArrayCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevVarULongArrayCmd::DevVarULongArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevVarULongArrayCmd::DevVarULongArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarULongArrayCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevVarULongArrayCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarULongArrayCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevVarULongArrayCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	const Tango::DevVarULongArray	*argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_var_ulong_array(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevVarFloatArrayCmd::DevVarFloatArrayCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevVarFloatArrayCmd::DevVarFloatArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevVarFloatArrayCmd::DevVarFloatArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarFloatArrayCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevVarFloatArrayCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarFloatArrayCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevVarFloatArrayCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	const Tango::DevVarFloatArray	*argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_var_float_array(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevVarDoubleArrayCmd::DevVarDoubleArrayCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevVarDoubleArrayCmd::DevVarDoubleArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevVarDoubleArrayCmd::DevVarDoubleArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarDoubleArrayCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevVarDoubleArrayCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarDoubleArrayCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevVarDoubleArrayCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	const Tango::DevVarDoubleArray	*argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_var_double_array(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevVarStringArrayCmd::DevVarStringArrayCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevVarStringArrayCmd::DevVarStringArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{

}
//
//	Constructor without in/out parameters description
//
DevVarStringArrayCmd::DevVarStringArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarStringArrayCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevVarStringArrayCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarStringArrayCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevVarStringArrayCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	const Tango::DevVarStringArray	*argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_var_string_array(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevVarLongStringArrayCmd::DevVarLongStringArrayCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevVarLongStringArrayCmd::DevVarLongStringArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevVarLongStringArrayCmd::DevVarLongStringArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarLongStringArrayCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevVarLongStringArrayCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarLongStringArrayCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)

//
//-----------------------------------------------------------------------------
CORBA::Any *DevVarLongStringArrayCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	const Tango::DevVarLongStringArray	*argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_var_long_string_array(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		DevVarDoubleStringArrayCmd::DevVarDoubleStringArrayCmd()
// 
// description : 	constructor for the command of the TangoTest.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevVarDoubleStringArrayCmd::DevVarDoubleStringArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
DevVarDoubleStringArrayCmd::DevVarDoubleStringArrayCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------

//
// method : 		DevVarDoubleStringArrayCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevVarDoubleStringArrayCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevVarDoubleStringArrayCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevVarDoubleStringArrayCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	const Tango::DevVarDoubleStringArray	*argin;
	extract(in_any, argin);

	return insert((static_cast<TangoTest *>(device))->dev_var_double_string_array(argin));
}


//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
TangoTestClass *TangoTestClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		TangoTestClass::TangoTestClass(string &s)
// 
// description : 	constructor for the TangoTestClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
TangoTestClass::TangoTestClass(string &s):DeviceClass(s)
{

	cout2 << "Entering TangoTestClass constructor" << endl;
	write_class_property();
	
	cout2 << "Leaving TangoTestClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		TangoTestClass::~TangoTestClass()
// 
// description : 	destructor for the TangoTestClass
//
//-----------------------------------------------------------------------------
TangoTestClass::~TangoTestClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		TangoTestClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
TangoTestClass *TangoTestClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new TangoTestClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

TangoTestClass *TangoTestClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		TangoTestClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void TangoTestClass::command_factory()
{
	command_list.push_back(new DevVoidCmd("DevVoid",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"N/A",
		"N/A",
		Tango::OPERATOR));
	command_list.push_back(new DevBooleanCmd("DevBoolean",
		Tango::DEV_BOOLEAN, Tango::DEV_BOOLEAN,
		"Any boolean value",
		"Echo of the argin value",
		Tango::OPERATOR));
	command_list.push_back(new DevShortCmd("DevShort",
		Tango::DEV_SHORT, Tango::DEV_SHORT,
		"Any DevShort value",
		"Echo of the argin value",
		Tango::OPERATOR));
	command_list.push_back(new DevUShortCmd("DevUShort",
		Tango::DEV_USHORT, Tango::DEV_USHORT,
		"Any DevUShort value",
		"Echo of the argin value",
		Tango::OPERATOR));
	command_list.push_back(new DevLongCmd("DevLong",
		Tango::DEV_LONG, Tango::DEV_LONG,
		"Any DevLong value",
		"Echo of the argin value",
		Tango::OPERATOR));
	command_list.push_back(new DevULongCmd("DevULong",
		Tango::DEV_ULONG, Tango::DEV_ULONG,
		"Any DevULong",
		"Echo of the argin value",
		Tango::OPERATOR));
	command_list.push_back(new DevFloatCmd("DevFloat",
		Tango::DEV_FLOAT, Tango::DEV_FLOAT,
		"Any DevFloat value",
		"Echo of the argin value",
		Tango::OPERATOR));
	command_list.push_back(new DevDoubleCmd("DevDouble",
		Tango::DEV_DOUBLE, Tango::DEV_DOUBLE,
		"Any DevDouble value",
		"Echo of the argin value",
		Tango::OPERATOR));
	command_list.push_back(new DevStringCmd("DevString",
		Tango::DEV_STRING, Tango::DEV_STRING,
		"-",
		"-",
		Tango::OPERATOR));
	command_list.push_back(new DevVarCharArrayCmd("DevVarCharArray",
		Tango::DEVVAR_CHARARRAY, Tango::DEVVAR_CHARARRAY,
		"-",
		"-",
		Tango::OPERATOR));
	command_list.push_back(new DevVarShortArrayCmd("DevVarShortArray",
		Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_SHORTARRAY,
		"-",
		"-",
		Tango::OPERATOR));
	command_list.push_back(new DevVarUShortArrayCmd("DevVarUShortArray",
		Tango::DEVVAR_USHORTARRAY, Tango::DEVVAR_USHORTARRAY,
		"-",
		"-",
		Tango::OPERATOR));
	command_list.push_back(new DevVarLongArrayCmd("DevVarLongArray",
		Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_LONGARRAY,
		"-",
		"-",
		Tango::OPERATOR));
	command_list.push_back(new DevVarULongArrayCmd("DevVarULongArray",
		Tango::DEVVAR_ULONGARRAY, Tango::DEVVAR_ULONGARRAY,
		"-",
		"-",
		Tango::OPERATOR));
	command_list.push_back(new DevVarFloatArrayCmd("DevVarFloatArray",
		Tango::DEVVAR_FLOATARRAY, Tango::DEVVAR_FLOATARRAY,
		"-",
		"-",
		Tango::OPERATOR));
	command_list.push_back(new DevVarDoubleArrayCmd("DevVarDoubleArray",
		Tango::DEVVAR_DOUBLEARRAY, Tango::DEVVAR_DOUBLEARRAY,
		"-",
		"-",
		Tango::OPERATOR));
	command_list.push_back(new DevVarStringArrayCmd("DevVarStringArray",
		Tango::DEVVAR_STRINGARRAY, Tango::DEVVAR_STRINGARRAY,
		"-",
		"-",
		Tango::OPERATOR));
	command_list.push_back(new DevVarLongStringArrayCmd("DevVarLongStringArray",
		Tango::DEVVAR_LONGSTRINGARRAY, Tango::DEVVAR_LONGSTRINGARRAY,
		"-",
		"-",
		Tango::OPERATOR));
	command_list.push_back(new DevVarDoubleStringArrayCmd("DevVarDoubleStringArray",
		Tango::DEVVAR_DOUBLESTRINGARRAY, Tango::DEVVAR_DOUBLESTRINGARRAY,
		"-",
		"-",
		Tango::OPERATOR));

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		TangoTestClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void TangoTestClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create device and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new TangoTest(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before id database used.
		//---------------------------------------------
		if (Tango::Util::_UseDb == true)
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
}
//+----------------------------------------------------------------------------
//	Method: TangoTestClass::attribute_factory(vector<Tango::Attr *> &att_list)
//-----------------------------------------------------------------------------
void TangoTestClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	//	Attribute : short_scalar_ro
	Tango::Attr	*short_scalar_ro = 
		new Tango::Attr("short_scalar_ro", Tango::DEV_SHORT, Tango::READ);
	att_list.push_back(short_scalar_ro);

	//	Attribute : short_scalar
	Tango::Attr	*short_scalar = 
		new Tango::Attr("short_scalar", Tango::DEV_SHORT, Tango::READ_WRITE);
	att_list.push_back(short_scalar);

	//	Attribute : long_scalar
	Tango::Attr	*long_scalar = 
		new Tango::Attr("long_scalar", Tango::DEV_LONG, Tango::READ_WRITE);
	att_list.push_back(long_scalar);

	//	Attribute : double_scalar
	Tango::Attr	*double_scalar = 
		new Tango::Attr("double_scalar", Tango::DEV_DOUBLE, Tango::READ_WRITE);
	att_list.push_back(double_scalar);

	//	Attribute : string_scalar
	Tango::Attr	*string_scalar = 
		new Tango::Attr("string_scalar", Tango::DEV_STRING, Tango::READ_WRITE);
	att_list.push_back(string_scalar);

	//	Attribute : short_spectrum
	Tango::SpectrumAttr	*short_spectrum = 
		new Tango::SpectrumAttr("short_spectrum", Tango::DEV_SHORT, 4096);
	att_list.push_back(short_spectrum);

	//	Attribute : long_spectrum
	Tango::SpectrumAttr	*long_spectrum = 
		new Tango::SpectrumAttr("long_spectrum", Tango::DEV_LONG, 4096);
	att_list.push_back(long_spectrum);

	//	Attribute : double_spectrum
	Tango::SpectrumAttr	*double_spectrum = 
		new Tango::SpectrumAttr("double_spectrum", Tango::DEV_DOUBLE, 4096);
	att_list.push_back(double_spectrum);

	//	Attribute : short_image
	Tango::ImageAttr	*short_image = 
		new Tango::ImageAttr("short_image", Tango::DEV_SHORT, 251, 251);
	att_list.push_back(short_image);

	//	Attribute : long_image
	Tango::ImageAttr	*long_image = 
		new Tango::ImageAttr("long_image", Tango::DEV_LONG, 251, 251);
	att_list.push_back(long_image);

	//	Attribute : double_image
	Tango::ImageAttr	*double_image = 
		new Tango::ImageAttr("double_image", Tango::DEV_DOUBLE, 251, 251);
	att_list.push_back(double_image);

	//	Attribute : short_scalar_w
	Tango::Attr	*short_scalar_w = 
		new Tango::Attr("short_scalar_w", Tango::DEV_SHORT, Tango::WRITE);
	att_list.push_back(short_scalar_w);

	//	Attribute : short_scalar_rww
	Tango::Attr	*short_scalar_rww = 
		new Tango::Attr("short_scalar_rww", Tango::DEV_SHORT, Tango::READ_WITH_WRITE, "short_scalar_w");
	att_list.push_back(short_scalar_rww);

	//	Attribute : long_scalar_w
	Tango::Attr	*long_scalar_w = 
		new Tango::Attr("long_scalar_w", Tango::DEV_LONG, Tango::WRITE);
	att_list.push_back(long_scalar_w);

	//	Attribute : long_scalar_rww
	Tango::Attr	*long_scalar_rww = 
		new Tango::Attr("long_scalar_rww", Tango::DEV_LONG, Tango::READ_WITH_WRITE, "long_scalar_w");
	att_list.push_back(long_scalar_rww);

	//	Attribute : double_scalar_w
	Tango::Attr	*double_scalar_w = 
		new Tango::Attr("double_scalar_w", Tango::DEV_DOUBLE, Tango::WRITE);
	att_list.push_back(double_scalar_w);

	//	Attribute : double_scalar_rww
	Tango::Attr	*double_scalar_rww = 
		new Tango::Attr("double_scalar_rww", Tango::DEV_DOUBLE, Tango::READ_WITH_WRITE, "double_scalar_w");
	att_list.push_back(double_scalar_rww);

	//	Attribute : ampli
	Tango::Attr	*ampli = 
		new Tango::Attr("ampli", Tango::DEV_DOUBLE, Tango::WRITE);
	att_list.push_back(ampli);

	//	Attribute : wave
	Tango::Attr	*wave = 
		new Tango::Attr("wave", Tango::DEV_DOUBLE, Tango::READ);
	att_list.push_back(wave);

}
//+----------------------------------------------------------------------------
//
// method : 		TangoTestClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void TangoTestClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	//	Prepeare DbDatum
	//--------------------------------------------
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("TANGO Device Server for testing generic clients");
	title << str_title;

	Tango::DbDatum	description("Description");
	string	str_desc("A device to test generic clients. It offers a \"echo\" like command for\n\
each TANGO data type (i.e. each command returns an exact copy of <argin>).");
	description << str_desc;
	
	Tango::DbData	data;
	data.push_back(title);
	data.push_back(description);

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

}	// namespace
