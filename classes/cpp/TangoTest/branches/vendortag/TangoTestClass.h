//=============================================================================
//
// file :         TangoTestClass.h
//
// description :  Include for the TangoTestClass root class.
//                This class is represents the singleton class for
//                the TangoTest device class.
//                It contains all properties and methods which the 
//                TangoTest requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _TANGOTESTCLASS_H
#define _TANGOTESTCLASS_H

#include <tango.h>


namespace TangoTest
{
//
// Define classes for commands
//
class DevVarDoubleStringArrayCmd : public Tango::Command
{
public:
	DevVarDoubleStringArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevVarDoubleStringArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevVarDoubleStringArrayCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevVarLongStringArrayCmd : public Tango::Command
{
public:
	DevVarLongStringArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevVarLongStringArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevVarLongStringArrayCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevVarStringArrayCmd : public Tango::Command
{
public:
	DevVarStringArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevVarStringArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevVarStringArrayCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevVarDoubleArrayCmd : public Tango::Command
{
public:
	DevVarDoubleArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevVarDoubleArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevVarDoubleArrayCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevVarFloatArrayCmd : public Tango::Command
{
public:
	DevVarFloatArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevVarFloatArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevVarFloatArrayCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevVarULongArrayCmd : public Tango::Command
{
public:
	DevVarULongArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevVarULongArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevVarULongArrayCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevVarLongArrayCmd : public Tango::Command
{
public:
	DevVarLongArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevVarLongArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevVarLongArrayCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevVarUShortArrayCmd : public Tango::Command
{
public:
	DevVarUShortArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevVarUShortArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevVarUShortArrayCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevVarShortArrayCmd : public Tango::Command
{
public:
	DevVarShortArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevVarShortArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevVarShortArrayCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevVarCharArrayCmd : public Tango::Command
{
public:
	DevVarCharArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevVarCharArrayCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevVarCharArrayCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevStringCmd : public Tango::Command
{
public:
	DevStringCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevStringCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevStringCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevDoubleCmd : public Tango::Command
{
public:
	DevDoubleCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevDoubleCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevDoubleCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevFloatCmd : public Tango::Command
{
public:
	DevFloatCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevFloatCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevFloatCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevULongCmd : public Tango::Command
{
public:
	DevULongCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevULongCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevULongCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevLongCmd : public Tango::Command
{
public:
	DevLongCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevLongCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevLongCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevUShortCmd : public Tango::Command
{
public:
	DevUShortCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevUShortCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevUShortCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevShortCmd : public Tango::Command
{
public:
	DevShortCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevShortCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevShortCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevBooleanCmd : public Tango::Command
{
public:
	DevBooleanCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevBooleanCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevBooleanCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class DevVoidCmd : public Tango::Command
{
public:
	DevVoidCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	DevVoidCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~DevVoidCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};



//
// The TangoTestClass singleton definition
//

class TangoTestClass : public Tango::DeviceClass
{
public:

//	add your own data members here
//------------------------------------

public:

//	Method prototypes
	static TangoTestClass *init(const char *);
	static TangoTestClass *instance();
	~TangoTestClass();
	
protected:
	TangoTestClass(string &);
	static TangoTestClass *_instance;
	void command_factory();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace TangoTest

#endif // _TANGOTESTCLASS_H
